/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MARS_H
#define MARS_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "mars_types.h"

namespace MARS {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MARSIf {
 public:
  virtual ~MARSIf() {}
  virtual void getCode(std::string& _return) = 0;
  virtual void sendMessage(std::string& _return) = 0;
  virtual void getMessage(const std::string& message) = 0;
  virtual void receiveFromJS(const Code& c) = 0;
  virtual void sendTable(std::vector<std::string> & _return) = 0;
  virtual void receiveTable(const std::vector<std::string> & colorTable) = 0;
};

class MARSIfFactory {
 public:
  typedef MARSIf Handler;

  virtual ~MARSIfFactory() {}

  virtual MARSIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MARSIf* /* handler */) = 0;
};

class MARSIfSingletonFactory : virtual public MARSIfFactory {
 public:
  MARSIfSingletonFactory(const boost::shared_ptr<MARSIf>& iface) : iface_(iface) {}
  virtual ~MARSIfSingletonFactory() {}

  virtual MARSIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MARSIf* /* handler */) {}

 protected:
  boost::shared_ptr<MARSIf> iface_;
};

class MARSNull : virtual public MARSIf {
 public:
  virtual ~MARSNull() {}
  void getCode(std::string& /* _return */) {
    return;
  }
  void sendMessage(std::string& /* _return */) {
    return;
  }
  void getMessage(const std::string& /* message */) {
    return;
  }
  void receiveFromJS(const Code& /* c */) {
    return;
  }
  void sendTable(std::vector<std::string> & /* _return */) {
    return;
  }
  void receiveTable(const std::vector<std::string> & /* colorTable */) {
    return;
  }
};


class MARS_getCode_args {
 public:

  MARS_getCode_args(const MARS_getCode_args&);
  MARS_getCode_args& operator=(const MARS_getCode_args&);
  MARS_getCode_args() {
  }

  virtual ~MARS_getCode_args() throw();

  bool operator == (const MARS_getCode_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MARS_getCode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_getCode_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_getCode_pargs {
 public:


  virtual ~MARS_getCode_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MARS_getCode_result__isset {
  _MARS_getCode_result__isset() : success(false) {}
  bool success :1;
} _MARS_getCode_result__isset;

class MARS_getCode_result {
 public:

  MARS_getCode_result(const MARS_getCode_result&);
  MARS_getCode_result& operator=(const MARS_getCode_result&);
  MARS_getCode_result() : success() {
  }

  virtual ~MARS_getCode_result() throw();
  std::string success;

  _MARS_getCode_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MARS_getCode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MARS_getCode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_getCode_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MARS_getCode_presult__isset {
  _MARS_getCode_presult__isset() : success(false) {}
  bool success :1;
} _MARS_getCode_presult__isset;

class MARS_getCode_presult {
 public:


  virtual ~MARS_getCode_presult() throw();
  std::string* success;

  _MARS_getCode_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MARS_sendMessage_args {
 public:

  MARS_sendMessage_args(const MARS_sendMessage_args&);
  MARS_sendMessage_args& operator=(const MARS_sendMessage_args&);
  MARS_sendMessage_args() {
  }

  virtual ~MARS_sendMessage_args() throw();

  bool operator == (const MARS_sendMessage_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MARS_sendMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_sendMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_sendMessage_pargs {
 public:


  virtual ~MARS_sendMessage_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MARS_sendMessage_result__isset {
  _MARS_sendMessage_result__isset() : success(false) {}
  bool success :1;
} _MARS_sendMessage_result__isset;

class MARS_sendMessage_result {
 public:

  MARS_sendMessage_result(const MARS_sendMessage_result&);
  MARS_sendMessage_result& operator=(const MARS_sendMessage_result&);
  MARS_sendMessage_result() : success() {
  }

  virtual ~MARS_sendMessage_result() throw();
  std::string success;

  _MARS_sendMessage_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const MARS_sendMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MARS_sendMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_sendMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MARS_sendMessage_presult__isset {
  _MARS_sendMessage_presult__isset() : success(false) {}
  bool success :1;
} _MARS_sendMessage_presult__isset;

class MARS_sendMessage_presult {
 public:


  virtual ~MARS_sendMessage_presult() throw();
  std::string* success;

  _MARS_sendMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MARS_getMessage_args__isset {
  _MARS_getMessage_args__isset() : message(false) {}
  bool message :1;
} _MARS_getMessage_args__isset;

class MARS_getMessage_args {
 public:

  MARS_getMessage_args(const MARS_getMessage_args&);
  MARS_getMessage_args& operator=(const MARS_getMessage_args&);
  MARS_getMessage_args() : message() {
  }

  virtual ~MARS_getMessage_args() throw();
  std::string message;

  _MARS_getMessage_args__isset __isset;

  void __set_message(const std::string& val);

  bool operator == (const MARS_getMessage_args & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const MARS_getMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_getMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_getMessage_pargs {
 public:


  virtual ~MARS_getMessage_pargs() throw();
  const std::string* message;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_getMessage_result {
 public:

  MARS_getMessage_result(const MARS_getMessage_result&);
  MARS_getMessage_result& operator=(const MARS_getMessage_result&);
  MARS_getMessage_result() {
  }

  virtual ~MARS_getMessage_result() throw();

  bool operator == (const MARS_getMessage_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MARS_getMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_getMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_getMessage_presult {
 public:


  virtual ~MARS_getMessage_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MARS_receiveFromJS_args__isset {
  _MARS_receiveFromJS_args__isset() : c(false) {}
  bool c :1;
} _MARS_receiveFromJS_args__isset;

class MARS_receiveFromJS_args {
 public:

  MARS_receiveFromJS_args(const MARS_receiveFromJS_args&);
  MARS_receiveFromJS_args& operator=(const MARS_receiveFromJS_args&);
  MARS_receiveFromJS_args() {
  }

  virtual ~MARS_receiveFromJS_args() throw();
  Code c;

  _MARS_receiveFromJS_args__isset __isset;

  void __set_c(const Code& val);

  bool operator == (const MARS_receiveFromJS_args & rhs) const
  {
    if (!(c == rhs.c))
      return false;
    return true;
  }
  bool operator != (const MARS_receiveFromJS_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_receiveFromJS_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_receiveFromJS_pargs {
 public:


  virtual ~MARS_receiveFromJS_pargs() throw();
  const Code* c;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_receiveFromJS_result {
 public:

  MARS_receiveFromJS_result(const MARS_receiveFromJS_result&);
  MARS_receiveFromJS_result& operator=(const MARS_receiveFromJS_result&);
  MARS_receiveFromJS_result() {
  }

  virtual ~MARS_receiveFromJS_result() throw();

  bool operator == (const MARS_receiveFromJS_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MARS_receiveFromJS_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_receiveFromJS_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_receiveFromJS_presult {
 public:


  virtual ~MARS_receiveFromJS_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class MARS_sendTable_args {
 public:

  MARS_sendTable_args(const MARS_sendTable_args&);
  MARS_sendTable_args& operator=(const MARS_sendTable_args&);
  MARS_sendTable_args() {
  }

  virtual ~MARS_sendTable_args() throw();

  bool operator == (const MARS_sendTable_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MARS_sendTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_sendTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_sendTable_pargs {
 public:


  virtual ~MARS_sendTable_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MARS_sendTable_result__isset {
  _MARS_sendTable_result__isset() : success(false) {}
  bool success :1;
} _MARS_sendTable_result__isset;

class MARS_sendTable_result {
 public:

  MARS_sendTable_result(const MARS_sendTable_result&);
  MARS_sendTable_result& operator=(const MARS_sendTable_result&);
  MARS_sendTable_result() {
  }

  virtual ~MARS_sendTable_result() throw();
  std::vector<std::string>  success;

  _MARS_sendTable_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const MARS_sendTable_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const MARS_sendTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_sendTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _MARS_sendTable_presult__isset {
  _MARS_sendTable_presult__isset() : success(false) {}
  bool success :1;
} _MARS_sendTable_presult__isset;

class MARS_sendTable_presult {
 public:


  virtual ~MARS_sendTable_presult() throw();
  std::vector<std::string> * success;

  _MARS_sendTable_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _MARS_receiveTable_args__isset {
  _MARS_receiveTable_args__isset() : colorTable(false) {}
  bool colorTable :1;
} _MARS_receiveTable_args__isset;

class MARS_receiveTable_args {
 public:

  MARS_receiveTable_args(const MARS_receiveTable_args&);
  MARS_receiveTable_args& operator=(const MARS_receiveTable_args&);
  MARS_receiveTable_args() {
  }

  virtual ~MARS_receiveTable_args() throw();
  std::vector<std::string>  colorTable;

  _MARS_receiveTable_args__isset __isset;

  void __set_colorTable(const std::vector<std::string> & val);

  bool operator == (const MARS_receiveTable_args & rhs) const
  {
    if (!(colorTable == rhs.colorTable))
      return false;
    return true;
  }
  bool operator != (const MARS_receiveTable_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_receiveTable_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_receiveTable_pargs {
 public:


  virtual ~MARS_receiveTable_pargs() throw();
  const std::vector<std::string> * colorTable;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_receiveTable_result {
 public:

  MARS_receiveTable_result(const MARS_receiveTable_result&);
  MARS_receiveTable_result& operator=(const MARS_receiveTable_result&);
  MARS_receiveTable_result() {
  }

  virtual ~MARS_receiveTable_result() throw();

  bool operator == (const MARS_receiveTable_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const MARS_receiveTable_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MARS_receiveTable_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class MARS_receiveTable_presult {
 public:


  virtual ~MARS_receiveTable_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class MARSClient : virtual public MARSIf {
 public:
  MARSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MARSClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCode(std::string& _return);
  void send_getCode();
  void recv_getCode(std::string& _return);
  void sendMessage(std::string& _return);
  void send_sendMessage();
  void recv_sendMessage(std::string& _return);
  void getMessage(const std::string& message);
  void send_getMessage(const std::string& message);
  void recv_getMessage();
  void receiveFromJS(const Code& c);
  void send_receiveFromJS(const Code& c);
  void recv_receiveFromJS();
  void sendTable(std::vector<std::string> & _return);
  void send_sendTable();
  void recv_sendTable(std::vector<std::string> & _return);
  void receiveTable(const std::vector<std::string> & colorTable);
  void send_receiveTable(const std::vector<std::string> & colorTable);
  void recv_receiveTable();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MARSProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MARSIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MARSProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getCode(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receiveFromJS(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receiveTable(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  MARSProcessor(boost::shared_ptr<MARSIf> iface) :
    iface_(iface) {
    processMap_["getCode"] = &MARSProcessor::process_getCode;
    processMap_["sendMessage"] = &MARSProcessor::process_sendMessage;
    processMap_["getMessage"] = &MARSProcessor::process_getMessage;
    processMap_["receiveFromJS"] = &MARSProcessor::process_receiveFromJS;
    processMap_["sendTable"] = &MARSProcessor::process_sendTable;
    processMap_["receiveTable"] = &MARSProcessor::process_receiveTable;
  }

  virtual ~MARSProcessor() {}
};

class MARSProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MARSProcessorFactory(const ::boost::shared_ptr< MARSIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MARSIfFactory > handlerFactory_;
};

class MARSMultiface : virtual public MARSIf {
 public:
  MARSMultiface(std::vector<boost::shared_ptr<MARSIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MARSMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MARSIf> > ifaces_;
  MARSMultiface() {}
  void add(boost::shared_ptr<MARSIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getCode(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCode(_return);
    }
    ifaces_[i]->getCode(_return);
    return;
  }

  void sendMessage(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessage(_return);
    }
    ifaces_[i]->sendMessage(_return);
    return;
  }

  void getMessage(const std::string& message) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessage(message);
    }
    ifaces_[i]->getMessage(message);
  }

  void receiveFromJS(const Code& c) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receiveFromJS(c);
    }
    ifaces_[i]->receiveFromJS(c);
  }

  void sendTable(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendTable(_return);
    }
    ifaces_[i]->sendTable(_return);
    return;
  }

  void receiveTable(const std::vector<std::string> & colorTable) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receiveTable(colorTable);
    }
    ifaces_[i]->receiveTable(colorTable);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MARSConcurrentClient : virtual public MARSIf {
 public:
  MARSConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MARSConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getCode(std::string& _return);
  int32_t send_getCode();
  void recv_getCode(std::string& _return, const int32_t seqid);
  void sendMessage(std::string& _return);
  int32_t send_sendMessage();
  void recv_sendMessage(std::string& _return, const int32_t seqid);
  void getMessage(const std::string& message);
  int32_t send_getMessage(const std::string& message);
  void recv_getMessage(const int32_t seqid);
  void receiveFromJS(const Code& c);
  int32_t send_receiveFromJS(const Code& c);
  void recv_receiveFromJS(const int32_t seqid);
  void sendTable(std::vector<std::string> & _return);
  int32_t send_sendTable();
  void recv_sendTable(std::vector<std::string> & _return, const int32_t seqid);
  void receiveTable(const std::vector<std::string> & colorTable);
  int32_t send_receiveTable(const std::vector<std::string> & colorTable);
  void recv_receiveTable(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
