/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef IncrementService_H
#define IncrementService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "increment_types.h"

namespace test {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class IncrementServiceIf {
 public:
  virtual ~IncrementServiceIf() {}
  virtual int32_t increment(const int32_t num) = 0;
  virtual void unlock() = 0;
};

class IncrementServiceIfFactory {
 public:
  typedef IncrementServiceIf Handler;

  virtual ~IncrementServiceIfFactory() {}

  virtual IncrementServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(IncrementServiceIf* /* handler */) = 0;
};

class IncrementServiceIfSingletonFactory : virtual public IncrementServiceIfFactory {
 public:
  IncrementServiceIfSingletonFactory(const boost::shared_ptr<IncrementServiceIf>& iface) : iface_(iface) {}
  virtual ~IncrementServiceIfSingletonFactory() {}

  virtual IncrementServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(IncrementServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<IncrementServiceIf> iface_;
};

class IncrementServiceNull : virtual public IncrementServiceIf {
 public:
  virtual ~IncrementServiceNull() {}
  int32_t increment(const int32_t /* num */) {
    int32_t _return = 0;
    return _return;
  }
  void unlock() {
    return;
  }
};

typedef struct _IncrementService_increment_args__isset {
  _IncrementService_increment_args__isset() : num(false) {}
  bool num :1;
} _IncrementService_increment_args__isset;

class IncrementService_increment_args {
 public:

  IncrementService_increment_args(const IncrementService_increment_args&);
  IncrementService_increment_args& operator=(const IncrementService_increment_args&);
  IncrementService_increment_args() : num(0) {
  }

  virtual ~IncrementService_increment_args() throw();
  int32_t num;

  _IncrementService_increment_args__isset __isset;

  void __set_num(const int32_t val);

  bool operator == (const IncrementService_increment_args & rhs) const
  {
    if (!(num == rhs.num))
      return false;
    return true;
  }
  bool operator != (const IncrementService_increment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncrementService_increment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IncrementService_increment_pargs {
 public:


  virtual ~IncrementService_increment_pargs() throw();
  const int32_t* num;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IncrementService_increment_result__isset {
  _IncrementService_increment_result__isset() : success(false) {}
  bool success :1;
} _IncrementService_increment_result__isset;

class IncrementService_increment_result {
 public:

  IncrementService_increment_result(const IncrementService_increment_result&);
  IncrementService_increment_result& operator=(const IncrementService_increment_result&);
  IncrementService_increment_result() : success(0) {
  }

  virtual ~IncrementService_increment_result() throw();
  int32_t success;

  _IncrementService_increment_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const IncrementService_increment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const IncrementService_increment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncrementService_increment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _IncrementService_increment_presult__isset {
  _IncrementService_increment_presult__isset() : success(false) {}
  bool success :1;
} _IncrementService_increment_presult__isset;

class IncrementService_increment_presult {
 public:


  virtual ~IncrementService_increment_presult() throw();
  int32_t* success;

  _IncrementService_increment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class IncrementService_unlock_args {
 public:

  IncrementService_unlock_args(const IncrementService_unlock_args&);
  IncrementService_unlock_args& operator=(const IncrementService_unlock_args&);
  IncrementService_unlock_args() {
  }

  virtual ~IncrementService_unlock_args() throw();

  bool operator == (const IncrementService_unlock_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IncrementService_unlock_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncrementService_unlock_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IncrementService_unlock_pargs {
 public:


  virtual ~IncrementService_unlock_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IncrementService_unlock_result {
 public:

  IncrementService_unlock_result(const IncrementService_unlock_result&);
  IncrementService_unlock_result& operator=(const IncrementService_unlock_result&);
  IncrementService_unlock_result() {
  }

  virtual ~IncrementService_unlock_result() throw();

  bool operator == (const IncrementService_unlock_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const IncrementService_unlock_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IncrementService_unlock_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class IncrementService_unlock_presult {
 public:


  virtual ~IncrementService_unlock_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class IncrementServiceClient : virtual public IncrementServiceIf {
 public:
  IncrementServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IncrementServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t increment(const int32_t num);
  void send_increment(const int32_t num);
  int32_t recv_increment();
  void unlock();
  void send_unlock();
  void recv_unlock();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class IncrementServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<IncrementServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (IncrementServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_increment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unlock(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  IncrementServiceProcessor(boost::shared_ptr<IncrementServiceIf> iface) :
    iface_(iface) {
    processMap_["increment"] = &IncrementServiceProcessor::process_increment;
    processMap_["unlock"] = &IncrementServiceProcessor::process_unlock;
  }

  virtual ~IncrementServiceProcessor() {}
};

class IncrementServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  IncrementServiceProcessorFactory(const ::boost::shared_ptr< IncrementServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< IncrementServiceIfFactory > handlerFactory_;
};

class IncrementServiceMultiface : virtual public IncrementServiceIf {
 public:
  IncrementServiceMultiface(std::vector<boost::shared_ptr<IncrementServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~IncrementServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<IncrementServiceIf> > ifaces_;
  IncrementServiceMultiface() {}
  void add(boost::shared_ptr<IncrementServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t increment(const int32_t num) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->increment(num);
    }
    return ifaces_[i]->increment(num);
  }

  void unlock() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unlock();
    }
    ifaces_[i]->unlock();
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class IncrementServiceConcurrentClient : virtual public IncrementServiceIf {
 public:
  IncrementServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  IncrementServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t increment(const int32_t num);
  int32_t send_increment(const int32_t num);
  int32_t recv_increment(const int32_t seqid);
  void unlock();
  int32_t send_unlock();
  void recv_unlock(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
