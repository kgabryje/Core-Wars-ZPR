//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

MARS.MARS_getCode_args = function(args) {
};
MARS.MARS_getCode_args.prototype = {};
MARS.MARS_getCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_getCode_args.prototype.write = function(output) {
  output.writeStructBegin('MARS_getCode_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_getCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
MARS.MARS_getCode_result.prototype = {};
MARS.MARS_getCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_getCode_result.prototype.write = function(output) {
  output.writeStructBegin('MARS_getCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_sendMessage_args = function(args) {
};
MARS.MARS_sendMessage_args.prototype = {};
MARS.MARS_sendMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_sendMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MARS_sendMessage_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_sendMessage_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
MARS.MARS_sendMessage_result.prototype = {};
MARS.MARS_sendMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_sendMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MARS_sendMessage_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_getMessage_args = function(args) {
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
MARS.MARS_getMessage_args.prototype = {};
MARS.MARS_getMessage_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_getMessage_args.prototype.write = function(output) {
  output.writeStructBegin('MARS_getMessage_args');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_getMessage_result = function(args) {
};
MARS.MARS_getMessage_result.prototype = {};
MARS.MARS_getMessage_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_getMessage_result.prototype.write = function(output) {
  output.writeStructBegin('MARS_getMessage_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_receiveFromJS_args = function(args) {
  this.c = null;
  if (args) {
    if (args.c !== undefined && args.c !== null) {
      this.c = new MARS.Code(args.c);
    }
  }
};
MARS.MARS_receiveFromJS_args.prototype = {};
MARS.MARS_receiveFromJS_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.c = new MARS.Code();
        this.c.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_receiveFromJS_args.prototype.write = function(output) {
  output.writeStructBegin('MARS_receiveFromJS_args');
  if (this.c !== null && this.c !== undefined) {
    output.writeFieldBegin('c', Thrift.Type.STRUCT, 1);
    this.c.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_receiveFromJS_result = function(args) {
};
MARS.MARS_receiveFromJS_result.prototype = {};
MARS.MARS_receiveFromJS_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_receiveFromJS_result.prototype.write = function(output) {
  output.writeStructBegin('MARS_receiveFromJS_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_getColorTable_args = function(args) {
};
MARS.MARS_getColorTable_args.prototype = {};
MARS.MARS_getColorTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_getColorTable_args.prototype.write = function(output) {
  output.writeStructBegin('MARS_getColorTable_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_getColorTable_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
  }
};
MARS.MARS_getColorTable_result.prototype = {};
MARS.MARS_getColorTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_getColorTable_result.prototype.write = function(output) {
  output.writeStructBegin('MARS_getColorTable_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_setColorTable_args = function(args) {
  this.colorTable = null;
  if (args) {
    if (args.colorTable !== undefined && args.colorTable !== null) {
      this.colorTable = Thrift.copyList(args.colorTable, [null]);
    }
  }
};
MARS.MARS_setColorTable_args.prototype = {};
MARS.MARS_setColorTable_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.colorTable = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString().value;
          this.colorTable.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_setColorTable_args.prototype.write = function(output) {
  output.writeStructBegin('MARS_setColorTable_args');
  if (this.colorTable !== null && this.colorTable !== undefined) {
    output.writeFieldBegin('colorTable', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.colorTable.length);
    for (var iter15 in this.colorTable)
    {
      if (this.colorTable.hasOwnProperty(iter15))
      {
        iter15 = this.colorTable[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARS_setColorTable_result = function(args) {
};
MARS.MARS_setColorTable_result.prototype = {};
MARS.MARS_setColorTable_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MARS.MARS_setColorTable_result.prototype.write = function(output) {
  output.writeStructBegin('MARS_setColorTable_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MARS.MARSClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
MARS.MARSClient.prototype = {};
MARS.MARSClient.prototype.getCode = function(callback) {
  if (callback === undefined) {
    this.send_getCode();
    return this.recv_getCode();
  } else {
    var postData = this.send_getCode(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getCode);
  }
};

MARS.MARSClient.prototype.send_getCode = function(callback) {
  this.output.writeMessageBegin('getCode', Thrift.MessageType.CALL, this.seqid);
  var args = new MARS.MARS_getCode_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MARS.MARSClient.prototype.recv_getCode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MARS.MARS_getCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCode failed: unknown result';
};
MARS.MARSClient.prototype.sendMessage = function(callback) {
  if (callback === undefined) {
    this.send_sendMessage();
    return this.recv_sendMessage();
  } else {
    var postData = this.send_sendMessage(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sendMessage);
  }
};

MARS.MARSClient.prototype.send_sendMessage = function(callback) {
  this.output.writeMessageBegin('sendMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new MARS.MARS_sendMessage_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MARS.MARSClient.prototype.recv_sendMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MARS.MARS_sendMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sendMessage failed: unknown result';
};
MARS.MARSClient.prototype.getMessage = function(message, callback) {
  if (callback === undefined) {
    this.send_getMessage(message);
    this.recv_getMessage();
  } else {
    var postData = this.send_getMessage(message, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getMessage);
  }
};

MARS.MARSClient.prototype.send_getMessage = function(message, callback) {
  this.output.writeMessageBegin('getMessage', Thrift.MessageType.CALL, this.seqid);
  var args = new MARS.MARS_getMessage_args();
  args.message = message;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MARS.MARSClient.prototype.recv_getMessage = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MARS.MARS_getMessage_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
MARS.MARSClient.prototype.receiveFromJS = function(c, callback) {
  if (callback === undefined) {
    this.send_receiveFromJS(c);
    this.recv_receiveFromJS();
  } else {
    var postData = this.send_receiveFromJS(c, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_receiveFromJS);
  }
};

MARS.MARSClient.prototype.send_receiveFromJS = function(c, callback) {
  this.output.writeMessageBegin('receiveFromJS', Thrift.MessageType.CALL, this.seqid);
  var args = new MARS.MARS_receiveFromJS_args();
  args.c = c;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MARS.MARSClient.prototype.recv_receiveFromJS = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MARS.MARS_receiveFromJS_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
MARS.MARSClient.prototype.getColorTable = function(callback) {
  if (callback === undefined) {
    this.send_getColorTable();
    return this.recv_getColorTable();
  } else {
    var postData = this.send_getColorTable(true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_getColorTable);
  }
};

MARS.MARSClient.prototype.send_getColorTable = function(callback) {
  this.output.writeMessageBegin('getColorTable', Thrift.MessageType.CALL, this.seqid);
  var args = new MARS.MARS_getColorTable_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MARS.MARSClient.prototype.recv_getColorTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MARS.MARS_getColorTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getColorTable failed: unknown result';
};
MARS.MARSClient.prototype.setColorTable = function(colorTable, callback) {
  if (callback === undefined) {
    this.send_setColorTable(colorTable);
    this.recv_setColorTable();
  } else {
    var postData = this.send_setColorTable(colorTable, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_setColorTable);
  }
};

MARS.MARSClient.prototype.send_setColorTable = function(colorTable, callback) {
  this.output.writeMessageBegin('setColorTable', Thrift.MessageType.CALL, this.seqid);
  var args = new MARS.MARS_setColorTable_args();
  args.colorTable = colorTable;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush(callback);
};

MARS.MARSClient.prototype.recv_setColorTable = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new MARS.MARS_setColorTable_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
